
## Max contiguous Array

logic :- just check sum at particular index and get the max of sum or current index ... eg. sum=Math.max(sum+A[index],A[index])
         now compare the global pointer with current sum.  global_max=Math.max(global_max,sum)
         
## Every element frequency is 2 only one element occures once ,find that number
  Xor of same number is 0 and xor of any number with zero is same number. java xor ^
  
## Find the number that's having the excat n/2 occurance in array  
    //Boyer-Moore Majority Vote Algorithm
    compare the majority element each element ,if its same then increment counter otherwise decrement,when counter become 0 then 
    change majority element 

public int majorityElement(int[] nums) {
      int n=nums.length;
      int majority=-1;
      int counter=0;  
      for(int i=0; i<nums.length ; i++ ){
          if(counter==0){
              majority=nums[i];
              counter++;
          }
          else{
              if(majority==nums[i]) counter++;
              else counter--;
          }
      }  
      return majority;  
    }


## Windows Sliding Algo Problem (Fix and variable)
Fix
1. Max and Min in array of size k
2. first -ve in every window size of K
3. count occurance of anagram
4. max of all subarray of size k
5. max of min for every window size

Variable
1. largest/smallest array with sum K
2. largest sub array of K distinct characters
3. length of largest substring with no repeating characters
4. pick toy
5. minimum window substring



